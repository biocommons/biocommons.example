[build-system]
requires = ["setuptools >= 70.1", "setuptools_scm[toml] ~= 8.1"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
  "deptry>=0.23",
  "mkdocs-material>=9.6",
  "mkdocs>=1.6",
  "mkdocstrings[python]>=0.30",
  "mypy>=1.17",
  "pre-commit>=3.8",
  "pytest-cov>=4.1",
  "pytest>=7.4",
  "ruff>=0.12",
  "tox-uv>=1.28"
]

[project]
name = "biocommons-example"
authors = [
  {name = "biocommons contributors", email = "biocommons-dev@googlegroups.com"}
]
dependencies = ["coloredlogs ~= 15.0", "pyyaml ~= 6.0"]
description = "biocommons.example package (namespaced)"
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.10"
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Operating System :: OS Independent"
]
dynamic = ["version"]

[project.optional-dependencies]
example = [
  "pyyaml"
]

[project.scripts]
marvin-quote = "biocommons.example.__main__:main"

[project.urls]
Homepage = "https://biocommons.github.io/python-package/"
Issues = "https://github.com/biocommons/python-package/issues"
Repository = "https://github.com/biocommons/python-package"
Documentation = "https://biocommons.github.io/python-package/"

[tool.coverage]

[tool.coverage.report]
show_missing = true
skip_empty = true
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",
  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self.debug",
  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",
  # Don't complain if non-runnable code isn't run:
  "if __name__ == .__main__.:"
]

[tool.coverage.run]
branch = true
omit = ["*_test.py", "*/test/*", "*/tests/*"]
source = ["src"]

[tool.deptry]

[tool.deptry.package_module_name_map]
# map package name to import name
# Making this explicit suppresses deptry notices
coloredlogs = "coloredlogs"
mkdocs = "mkdocs"
mkdocs-material = "mkdocs_material"
mkdocstrings = "mkdocstrings"
mypy = "mypy"
pre-commit = "pre_commit"
pytest = "pytest"
pytest-cov = "pytest_cov"
pyyaml = "yaml"
ruff = "ruff"
tox-uv = "tox_uv"
ty = "ty"

# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
[tool.pytest.ini_options]
addopts = "-s -v -x --strict-markers -m 'not extra' --doctest-modules --cov=src"
doctest_optionflags = [
  "ALLOW_BYTES",
  "ALLOW_UNICODE",
  "ELLIPSIS",
  "IGNORE_EXCEPTION_DETAIL",
  "NORMALIZE_WHITESPACE"
]
markers = [
  "network: tests that require network connectivity",
  "slow: slow tests that should be run infrequently"
]

[tool.ruff]
src = ["src", "tests"]
line-length = 100

[tool.ruff.format]
quote-style = "double"
docstring-code-format = true

[tool.ruff.lint]
select = [
  "F", # https://docs.astral.sh/ruff/rules/#pyflakes-f
  "E",
  "W", # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
  "I", # https://docs.astral.sh/ruff/rules/#isort-i
  "N", # https://docs.astral.sh/ruff/rules/#pep8-naming-n
  "UP", # https://docs.astral.sh/ruff/rules/#pyupgrade-up
  "YTT", # https://docs.astral.sh/ruff/rules/#flake8-2020-ytt
  "S", # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
  "B", # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
  "A", # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
  "C4", # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
  "DTZ", # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
  "EM", # https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
  "LOG", # https://docs.astral.sh/ruff/rules/#flake8-logging-log
  "G", # https://docs.astral.sh/ruff/rules/#flake8-logging-format-g
  "PIE", # https://docs.astral.sh/ruff/rules/#flake8-pie-pie
  "PT", # https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
  "RSE", # https://docs.astral.sh/ruff/rules/#flake8-raise-rse
  "RET", # https://docs.astral.sh/ruff/rules/#flake8-return-ret
  "SIM", # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
  "ARG", # https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
  "PTH", # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
  "PL", # https://docs.astral.sh/ruff/rules/#pylint-pl
  "TRY", # https://docs.astral.sh/ruff/rules/#tryceratops-try
  "PERF", # https://docs.astral.sh/ruff/rules/#perflint-perf
  "RUF" # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
]
fixable = [
  "F401",
  "F541",
  "I",
  "D",
  "UP",
  "B",
  "C4",
  "EM",
  "PIE",
  "PT",
  "RSE",
  "RET",
  "SIM",
  "PERF",
  "RUF"
]
ignore = [
  # ignore for compatibility with formatter
  "W191",
  "E111",
  "E114",
  "E117",
  "S321",
  # other
  "PLR0913"
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.gz", "*.json", "*.yaml"]

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["__pycache__", "*.pyc"]
namespaces = true

[tool.setuptools_scm]
