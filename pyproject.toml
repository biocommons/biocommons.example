[project]
name = "biocommons.example"
authors = [
    { name = "biocommons contributors", email = "biocommons-dev@googlegroups.com" },
]
description = "Example Package"
readme = "README.md"
license = { file = "LICENSE.txt" }
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dynamic = ["version"]
dependencies = ["coloredlogs ~= 15.0", "pyyaml ~= 6.0"]

[project.optional-dependencies]
dev = [
    "build ~= 0.8",
    "ipython ~= 8.4",
    "mypy-extensions ~= 1.0",
    "pre-commit >= 4.2.0",
    "pyright~=1.1",
    "ruff == 0.12.8",
]
tests = [
    "pytest-cov ~= 4.1",
    "pytest-optional-tests",
    "pytest ~= 7.1",
    "vcrpy",
    "tox ~= 4.15",
]
docs = ["mkdocs"]

[project.scripts]
marvin-quote = "biocommons.example.__main__:main"

[project.urls]
"Homepage" = "https://github.com/biocommons/biocommons.example"
"Bug Tracker" = "https://github.com/biocommons/biocommons.example/issues"


[build-system]
requires = ["setuptools >= 70.1", "setuptools_scm[toml] ~= 8.1"]
build-backend = "setuptools.build_meta"


[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["__pycache__", "*.pyc"]
namespaces = true

[tool.setuptools.package-data]
"*" = ["*.gz", "*.json", "*.yaml"]


[tool.setuptools_scm]


# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
[tool.pytest.ini_options]
addopts = "-s -v -x --strict-markers -m 'not extra' --doctest-modules --cov=src"
doctest_optionflags = [
    "ALLOW_BYTES",
    "ALLOW_UNICODE",
    "ELLIPSIS",
    "IGNORE_EXCEPTION_DETAIL",
    "NORMALIZE_WHITESPACE",
]
markers = [
    "network: tests that require network connectivity",
    "slow: slow tests that should be run infrequently",
]


[tool.coverage.run]
branch = true
source = ["biocommons.example"]
omit = ["*_test.py", "*/test/*", "*/tests/*"]


[tool.coverage.report]
show_missing = true
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",
]

[tool.pyright]
include = ["src", "tests"]

[tool.ruff]
src = ["src", "tests"]
line-length = 100

[tool.ruff.lint]
select = [
    "ANN",  # https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
    "ASYNC",  # https://docs.astral.sh/ruff/rules/#flake8-async-async
    "S",  # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "B",  # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "A",  # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    "COM",  # https://docs.astral.sh/ruff/rules/#flake8-commas-com
    "C4",  # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "DTZ",  # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
    "T10",  # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
    "EM",  # https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
    "ISC",  # https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc
    "ICN",  # https://docs.astral.sh/ruff/rules/#flake8-import-conventions-icn
    "LOG",  # https://docs.astral.sh/ruff/rules/#flake8-logging-log
    "G",  # https://docs.astral.sh/ruff/rules/#flake8-logging-format-g
    "INP",  # https://docs.astral.sh/ruff/rules/#flake8-no-pep420-inp
    "PIE",  # https://docs.astral.sh/ruff/rules/#flake8-pie-pie
    "T20",  # https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "PT",  # https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "Q",  # https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "RSE",  # https://docs.astral.sh/ruff/rules/#flake8-raise-rse
    "RET",  # https://docs.astral.sh/ruff/rules/#flake8-return-ret
    "SLF",  # https://docs.astral.sh/ruff/rules/#flake8-self-slf
    "SIM",  # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "SLOT",  # https://docs.astral.sh/ruff/rules/#flake8-slots-slot
    "TID",  # https://docs.astral.sh/ruff/rules/#flake8-tidy-imports-tid
    "ARG",  # https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
    "PTH",  # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "I",  # https://docs.astral.sh/ruff/rules/#isort-i
    "N",  # https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "PERF",  # https://docs.astral.sh/ruff/rules/#perflint-perf
    "E", "W",  # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "D",  # https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "F",  # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "PGH",  # https://docs.astral.sh/ruff/rules/#pygrep-hooks-pgh
    "PLC",  # https://docs.astral.sh/ruff/rules/#convention-c
    "PLE",  # https://docs.astral.sh/ruff/rules/#error-e_1
    "PLW",  # https://docs.astral.sh/ruff/rules/#warning-plw
    "UP",  # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "FURB",  # https://docs.astral.sh/ruff/rules/#refurb-furb
    "RUF",  # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "TRY",  # https://docs.astral.sh/ruff/rules/#tryceratops-try
]
fixable = [
    "ANN",
    "ASYNC",
    "B",
    "C4",
    "EM",
    "ISC",
    "ICN",
    "LOG",
    "G",
    "PIE",
    "PT",
    "RSE",
    "RET",
    "SIM",
    "TID",
    "PTH",
    "I",
    "N",
    "PERF",
    "D",
    "F401",
    "F541",
    "PGH",
    "PLC",
    "PLE",
    "PLW",
    "UP",
    "FURB",
    "RUF",
    "TRY"
]
ignore = [
    # ignore for compatibility with formatter
    "D206",
    "D300",
    "W191",
    "E111",
    "E114",
    "E117",
    "E501",
    "W191",
    "S321",
    "COM812",
    # other
    "ANN002",
    "ANN003",
    "PLR0913",
    "PLC0206",
    "EM101",
    "D213",
    "D203",
    "D400",
    "D415",
]

[tool.ruff.lint.per-file-ignores]
# ANN001 - missing-type-function-argument
# ANN2 - missing-return-type
# D100 - undocumented-public-module
# D102 - undocumented-public-class
# D103 - undocumented-public-function
# S101 - assert
# B011 - assert-false
# INP001 - implicit-namespace-package
"tests/*" = [
    "ANN001",
    "ANN2",
    "D100",
    "D102",
    "D103",
    "S101",
    "B011",
    "INP001"
]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.format]
docstring-code-format = true
